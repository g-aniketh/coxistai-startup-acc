'use client';

import { useState, useEffect } from 'react';
import AuthGuard from '@/components/auth/AuthGuard';
import MainLayout from '@/components/layout/MainLayout';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/Badge';
import { 
  Calculator, 
  FileText, 
  AlertTriangle, 
  CheckCircle, 
  Calendar,
  TrendingUp,
  Receipt,
  Banknote,
  Clock,
  Shield,
  Download,
  Upload,
  Eye,
  Edit,
  Trash2
} from 'lucide-react';
import { cn } from '@/lib/utils';
import toast from 'react-hot-toast';

interface TaxReturn {
  id: string;
  type: 'GST' | 'TDS' | 'Income Tax';
  period: string;
  dueDate: string;
  status: 'Pending' | 'Filed' | 'Overdue';
  amount: number;
  penalty?: number;
  autoGenerated: boolean;
}

interface GSTCalculation {
  sales: number;
  purchases: number;
  outputTax: number;
  inputTax: number;
  netTax: number;
  cgst: number;
  sgst: number;
  igst: number;
}

interface TDSRecord {
  id: string;
  vendor: string;
  amount: number;
  tdsRate: number;
  tdsAmount: number;
  date: string;
  status: 'Pending' | 'Paid';
}

export default function TaxCompliancePage() {
  const [activeTab, setActiveTab] = useState<'overview' | 'gst' | 'tds' | 'returns'>('overview');
  const [gstCalculation, setGstCalculation] = useState<GSTCalculation>({
    sales: 0,
    purchases: 0,
    outputTax: 0,
    inputTax: 0,
    netTax: 0,
    cgst: 0,
    sgst: 0,
    igst: 0
  });
  const [tdsRecords, setTdsRecords] = useState<TDSRecord[]>([]);
  const [taxReturns, setTaxReturns] = useState<TaxReturn[]>([]);
  const [isCalculating, setIsCalculating] = useState(false);

  // Mock data initialization
  useEffect(() => {
    // Initialize with mock data
    setTdsRecords([
      {
        id: '1',
        vendor: 'Tech Solutions Pvt Ltd',
        amount: 50000,
        tdsRate: 10,
        tdsAmount: 5000,
        date: '2024-01-15',
        status: 'Paid'
      },
      {
        id: '2',
        vendor: 'Marketing Agency Inc',
        amount: 25000,
        tdsRate: 10,
        tdsAmount: 2500,
        date: '2024-01-20',
        status: 'Pending'
      }
    ]);

    setTaxReturns([
      {
        id: '1',
        type: 'GST',
        period: 'Jan 2024',
        dueDate: '2024-02-20',
        status: 'Pending',
        amount: 15000,
        autoGenerated: true
      },
      {
        id: '2',
        type: 'TDS',
        period: 'Q4 2023',
        dueDate: '2024-01-31',
        status: 'Overdue',
        amount: 25000,
        penalty: 2500,
        autoGenerated: true
      },
      {
        id: '3',
        type: 'Income Tax',
        period: 'FY 2023-24',
        dueDate: '2024-07-31',
        status: 'Pending',
        amount: 75000,
        autoGenerated: false
      }
    ]);
  }, []);

  const calculateGST = async () => {
    setIsCalculating(true);
    
    // Simulate AI calculation
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const outputTax = gstCalculation.sales * 0.18; // 18% GST
    const inputTax = gstCalculation.purchases * 0.18;
    const netTax = outputTax - inputTax;
    
    setGstCalculation(prev => ({
      ...prev,
      outputTax,
      inputTax,
      netTax,
      cgst: netTax / 2,
      sgst: netTax / 2,
      igst: netTax
    }));
    
    setIsCalculating(false);
    toast.success('GST calculation completed!');
  };

  const addTDSRecord = () => {
    const newRecord: TDSRecord = {
      id: Date.now().toString(),
      vendor: 'New Vendor',
      amount: 0,
      tdsRate: 10,
      tdsAmount: 0,
      date: new Date().toISOString().split('T')[0],
      status: 'Pending'
    };
    setTdsRecords(prev => [...prev, newRecord]);
    toast.success('TDS record added');
  };

  const updateTDSRecord = (id: string, field: keyof TDSRecord, value: any) => {
    setTdsRecords(prev => prev.map(record => {
      if (record.id === id) {
        const updated = { ...record, [field]: value };
        if (field === 'amount' || field === 'tdsRate') {
          updated.tdsAmount = updated.amount * (updated.tdsRate / 100);
        }
        return updated;
      }
      return record;
    }));
  };

  const deleteTDSRecord = (id: string) => {
    setTdsRecords(prev => prev.filter(record => record.id !== id));
    toast.success('TDS record deleted');
  };

  const fileTaxReturn = (id: string) => {
    setTaxReturns(prev => prev.map(return_ => 
      return_.id === id ? { ...return_, status: 'Filed' as const } : return_
    ));
    toast.success('Tax return filed successfully!');
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-IN', {
      style: 'currency',
      currency: 'INR',
      minimumFractionDigits: 0,
    }).format(amount);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Pending': return 'bg-yellow-100 text-yellow-800';
      case 'Filed': return 'bg-green-100 text-green-800';
      case 'Overdue': return 'bg-red-100 text-red-800';
      case 'Paid': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getDueDateStatus = (dueDate: string) => {
    const today = new Date();
    const due = new Date(dueDate);
    const diffDays = Math.ceil((due.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
    
    if (diffDays < 0) return { status: 'Overdue', color: 'text-red-600' };
    if (diffDays <= 7) return { status: 'Due Soon', color: 'text-orange-600' };
    return { status: 'Upcoming', color: 'text-green-600' };
  };

  return (
    <AuthGuard requireAuth={true}>
      <MainLayout>
        <div className="bg-gray-50 flex">
          <div className="flex-1 overflow-y-auto custom-scrollbar">
            <div className="p-4 md:p-8 space-y-4 md:space-y-6">
              {/* Header */}
              <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
                <div>
                  <h1 className="text-2xl md:text-3xl font-bold text-[#2C2C2C]">Tax & Compliance</h1>
                  <p className="text-sm text-[#2C2C2C]/70">
                    AI-powered tax calculations, compliance tracking, and automated filing
                  </p>
                </div>
                <div className="flex gap-3">
                  <Button className="bg-[#607c47] hover:bg-[#4a6129] text-white">
                    <Upload className="h-4 w-4 mr-2" />
                    Upload Documents
                  </Button>
                  <Button className="bg-blue-600 hover:bg-blue-700 text-white">
                    <Shield className="h-4 w-4 mr-2" />
                    Compliance Check
                  </Button>
                </div>
              </div>

              {/* AI Status Banner */}
              <div className="bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-xl p-4 mb-6">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className="p-2 bg-green-100 rounded-lg">
                      <Shield className="h-5 w-5 text-green-600" />
                    </div>
                    <div>
                      <h3 className="font-semibold text-green-900">AI Tax Assistant</h3>
                      <p className="text-sm text-green-700">Automated calculations • Compliance monitoring • Smart alerts</p>
                    </div>
                  </div>
                  <div className="flex items-center gap-2 text-sm text-green-600">
                    <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                    Active Monitoring
                  </div>
                </div>
              </div>

              {/* Tabs */}
              <div className="flex gap-2 border-b border-gray-200">
                <Button
                  onClick={() => setActiveTab('overview')}
                  variant={activeTab === 'overview' ? 'default' : 'ghost'}
                  className={activeTab === 'overview' ? 'bg-[#607c47] hover:bg-[#4a6129] text-white' : 'text-[#2C2C2C] hover:bg-gray-100'}
                >
                  <TrendingUp className="h-4 w-4 mr-2" />
                  Overview
                </Button>
                <Button
                  onClick={() => setActiveTab('gst')}
                  variant={activeTab === 'gst' ? 'default' : 'ghost'}
                  className={activeTab === 'gst' ? 'bg-[#607c47] hover:bg-[#4a6129] text-white' : 'text-[#2C2C2C] hover:bg-gray-100'}
                >
                  <Calculator className="h-4 w-4 mr-2" />
                  GST Calculator
                </Button>
                <Button
                  onClick={() => setActiveTab('tds')}
                  variant={activeTab === 'tds' ? 'default' : 'ghost'}
                  className={activeTab === 'tds' ? 'bg-[#607c47] hover:bg-[#4a6129] text-white' : 'text-[#2C2C2C] hover:bg-gray-100'}
                >
                  <Banknote className="h-4 w-4 mr-2" />
                  TDS Management
                </Button>
                <Button
                  onClick={() => setActiveTab('returns')}
                  variant={activeTab === 'returns' ? 'default' : 'ghost'}
                  className={activeTab === 'returns' ? 'bg-[#607c47] hover:bg-[#4a6129] text-white' : 'text-[#2C2C2C] hover:bg-gray-100'}
                >
                  <FileText className="h-4 w-4 mr-2" />
                  Tax Returns
                </Button>
              </div>

              {/* Overview Tab */}
              {activeTab === 'overview' && (
                <div className="space-y-6">
                  {/* Key Metrics */}
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <Card className="rounded-xl border-0 shadow-lg bg-gradient-to-br from-blue-50 to-cyan-50">
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-blue-100 rounded-lg">
                            <Calculator className="h-5 w-5 text-blue-600" />
                          </div>
                          <div>
                            <div className="text-sm text-blue-700">GST Payable</div>
                            <div className="text-lg font-bold text-blue-900">
                              {formatCurrency(gstCalculation.netTax)}
                            </div>
                            <div className="text-xs text-blue-600">Current Period</div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>

                    <Card className="rounded-xl border-0 shadow-lg bg-gradient-to-br from-green-50 to-emerald-50">
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-green-100 rounded-lg">
                            <Banknote className="h-5 w-5 text-green-600" />
                          </div>
                          <div>
                            <div className="text-sm text-green-700">TDS Collected</div>
                            <div className="text-lg font-bold text-green-900">
                              {formatCurrency(tdsRecords.reduce((sum, record) => sum + record.tdsAmount, 0))}
                            </div>
                            <div className="text-xs text-green-600">This Month</div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>

                    <Card className="rounded-xl border-0 shadow-lg bg-gradient-to-br from-orange-50 to-red-50">
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-orange-100 rounded-lg">
                            <AlertTriangle className="h-5 w-5 text-orange-600" />
                          </div>
                          <div>
                            <div className="text-sm text-orange-700">Overdue Returns</div>
                            <div className="text-lg font-bold text-orange-900">
                              {taxReturns.filter(r => r.status === 'Overdue').length}
                            </div>
                            <div className="text-xs text-orange-600">Requires Attention</div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>

                    <Card className="rounded-xl border-0 shadow-lg bg-gradient-to-br from-purple-50 to-indigo-50">
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-purple-100 rounded-lg">
                            <CheckCircle className="h-5 w-5 text-purple-600" />
                          </div>
                          <div>
                            <div className="text-sm text-purple-700">Compliance Score</div>
                            <div className="text-lg font-bold text-purple-900">92%</div>
                            <div className="text-xs text-purple-600">Excellent</div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </div>

                  {/* Upcoming Deadlines */}
                  <Card className="rounded-xl border-0 shadow-lg bg-white">
                    <CardHeader className="pb-3">
                      <CardTitle className="text-lg font-medium text-[#2C2C2C] flex items-center gap-2">
                        <Calendar className="h-5 w-5 text-[#607c47]" />
                        Upcoming Deadlines
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="pt-0">
                      <div className="space-y-3">
                        {taxReturns.map((return_) => {
                          const dueStatus = getDueDateStatus(return_.dueDate);
                          return (
                            <div key={return_.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                              <div className="flex items-center gap-3">
                                <div className="p-2 bg-blue-100 rounded-lg">
                                  <FileText className="h-4 w-4 text-blue-600" />
                                </div>
                                <div>
                                  <h4 className="font-semibold text-[#2C2C2C]">{return_.type} Return</h4>
                                  <p className="text-sm text-gray-600">{return_.period}</p>
                                </div>
                              </div>
                              <div className="flex items-center gap-3">
                                <div className="text-right">
                                  <p className={`text-sm font-medium ${dueStatus.color}`}>
                                    Due: {new Date(return_.dueDate).toLocaleDateString()}
                                  </p>
                                  <p className="text-xs text-gray-600">{dueStatus.status}</p>
                                </div>
                                <Badge className={getStatusColor(return_.status)}>
                                  {return_.status}
                                </Badge>
                                {return_.status === 'Pending' && (
                                  <Button
                                    size="sm"
                                    onClick={() => fileTaxReturn(return_.id)}
                                    className="bg-[#607c47] hover:bg-[#4a6129] text-white"
                                  >
                                    File Now
                                  </Button>
                                )}
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    </CardContent>
                  </Card>
                </div>
              )}

              {/* GST Calculator Tab */}
              {activeTab === 'gst' && (
                <div className="space-y-6">
                  <Card className="rounded-xl border-0 shadow-lg bg-white">
                    <CardHeader className="pb-3">
                      <CardTitle className="text-lg font-medium text-[#2C2C2C] flex items-center gap-2">
                        <Calculator className="h-5 w-5 text-[#607c47]" />
                        AI-Powered GST Calculator
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="pt-0">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div className="space-y-4">
                          <div>
                            <Label htmlFor="sales" className="text-sm font-medium text-[#2C2C2C]">
                              Total Sales (₹)
                            </Label>
                            <Input
                              id="sales"
                              type="number"
                              value={gstCalculation.sales}
                              onChange={(e) => setGstCalculation(prev => ({ ...prev, sales: Number(e.target.value) }))}
                              className="mt-2 bg-white"
                              placeholder="Enter total sales amount"
                            />
                          </div>
                          <div>
                            <Label htmlFor="purchases" className="text-sm font-medium text-[#2C2C2C]">
                              Total Purchases (₹)
                            </Label>
                            <Input
                              id="purchases"
                              type="number"
                              value={gstCalculation.purchases}
                              onChange={(e) => setGstCalculation(prev => ({ ...prev, purchases: Number(e.target.value) }))}
                              className="mt-2 bg-white"
                              placeholder="Enter total purchases amount"
                            />
                          </div>
                          <Button
                            onClick={calculateGST}
                            disabled={isCalculating}
                            className="w-full bg-[#607c47] hover:bg-[#4a6129] text-white"
                          >
                            {isCalculating ? (
                              <>
                                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2" />
                                Calculating...
                              </>
                            ) : (
                              <>
                                <Calculator className="h-4 w-4 mr-2" />
                                Calculate GST
                              </>
                            )}
                          </Button>
                        </div>
                        
                        <div className="space-y-4">
                          <div className="bg-gray-50 rounded-lg p-4">
                            <h4 className="font-semibold text-[#2C2C2C] mb-3">GST Breakdown</h4>
                            <div className="space-y-2">
                              <div className="flex justify-between">
                                <span className="text-sm text-gray-600">Output Tax (18%)</span>
                                <span className="font-medium">{formatCurrency(gstCalculation.outputTax)}</span>
                              </div>
                              <div className="flex justify-between">
                                <span className="text-sm text-gray-600">Input Tax (18%)</span>
                                <span className="font-medium">{formatCurrency(gstCalculation.inputTax)}</span>
                              </div>
                              <div className="border-t pt-2 flex justify-between">
                                <span className="font-semibold text-[#2C2C2C]">Net GST Payable</span>
                                <span className="font-bold text-[#607c47]">{formatCurrency(gstCalculation.netTax)}</span>
                              </div>
                            </div>
                          </div>
                          
                          <div className="bg-blue-50 rounded-lg p-4">
                            <h4 className="font-semibold text-blue-900 mb-3">Tax Distribution</h4>
                            <div className="space-y-2">
                              <div className="flex justify-between">
                                <span className="text-sm text-blue-700">CGST (9%)</span>
                                <span className="font-medium text-blue-900">{formatCurrency(gstCalculation.cgst)}</span>
                              </div>
                              <div className="flex justify-between">
                                <span className="text-sm text-blue-700">SGST (9%)</span>
                                <span className="font-medium text-blue-900">{formatCurrency(gstCalculation.sgst)}</span>
                              </div>
                              <div className="flex justify-between">
                                <span className="text-sm text-blue-700">IGST (18%)</span>
                                <span className="font-medium text-blue-900">{formatCurrency(gstCalculation.igst)}</span>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              )}

              {/* TDS Management Tab */}
              {activeTab === 'tds' && (
                <div className="space-y-6">
                  <Card className="rounded-xl border-0 shadow-lg bg-white">
                    <CardHeader className="pb-3">
                      <CardTitle className="text-lg font-medium text-[#2C2C2C] flex items-center gap-2">
                        <Banknote className="h-5 w-5 text-[#607c47]" />
                        TDS Management
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="pt-0">
                      <div className="flex justify-between items-center mb-4">
                        <p className="text-sm text-gray-600">Manage TDS deductions and payments</p>
                        <Button
                          onClick={addTDSRecord}
                          className="bg-[#607c47] hover:bg-[#4a6129] text-white"
                        >
                          <Receipt className="h-4 w-4 mr-2" />
                          Add TDS Record
                        </Button>
                      </div>
                      
                      <div className="space-y-3">
                        {tdsRecords.map((record) => (
                          <div key={record.id} className="bg-gray-50 rounded-lg p-4">
                            <div className="grid grid-cols-1 md:grid-cols-5 gap-4 items-center">
                              <div>
                                <Label className="text-xs text-gray-500">Vendor</Label>
                                <Input
                                  value={record.vendor}
                                  onChange={(e) => updateTDSRecord(record.id, 'vendor', e.target.value)}
                                  className="mt-1 bg-white"
                                />
                              </div>
                              <div>
                                <Label className="text-xs text-gray-500">Amount (₹)</Label>
                                <Input
                                  type="number"
                                  value={record.amount}
                                  onChange={(e) => updateTDSRecord(record.id, 'amount', Number(e.target.value))}
                                  className="mt-1 bg-white"
                                />
                              </div>
                              <div>
                                <Label className="text-xs text-gray-500">TDS Rate (%)</Label>
                                <Input
                                  type="number"
                                  value={record.tdsRate}
                                  onChange={(e) => updateTDSRecord(record.id, 'tdsRate', Number(e.target.value))}
                                  className="mt-1 bg-white"
                                />
                              </div>
                              <div>
                                <Label className="text-xs text-gray-500">TDS Amount (₹)</Label>
                                <Input
                                  value={record.tdsAmount}
                                  readOnly
                                  className="mt-1 bg-gray-100"
                                />
                              </div>
                              <div className="flex items-center gap-2">
                                <Badge className={getStatusColor(record.status)}>
                                  {record.status}
                                </Badge>
                                <Button
                                  size="sm"
                                  variant="outline"
                                  onClick={() => deleteTDSRecord(record.id)}
                                  className="text-red-600 hover:text-red-700"
                                >
                                  <Trash2 className="h-4 w-4" />
                                </Button>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </CardContent>
                  </Card>
                </div>
              )}

              {/* Tax Returns Tab */}
              {activeTab === 'returns' && (
                <div className="space-y-6">
                  <Card className="rounded-xl border-0 shadow-lg bg-white">
                    <CardHeader className="pb-3">
                      <CardTitle className="text-lg font-medium text-[#2C2C2C] flex items-center gap-2">
                        <FileText className="h-5 w-5 text-[#607c47]" />
                        Tax Returns Management
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="pt-0">
                      <div className="space-y-4">
                        {taxReturns.map((return_) => {
                          const dueStatus = getDueDateStatus(return_.dueDate);
                          return (
                            <div key={return_.id} className="border border-gray-200 rounded-lg p-4">
                              <div className="flex items-center justify-between mb-3">
                                <div className="flex items-center gap-3">
                                  <div className="p-2 bg-blue-100 rounded-lg">
                                    <FileText className="h-5 w-5 text-blue-600" />
                                  </div>
                                  <div>
                                    <h4 className="font-semibold text-[#2C2C2C]">{return_.type} Return</h4>
                                    <p className="text-sm text-gray-600">{return_.period}</p>
                                  </div>
                                </div>
                                <div className="flex items-center gap-3">
                                  <Badge className={getStatusColor(return_.status)}>
                                    {return_.status}
                                  </Badge>
                                  {return_.autoGenerated && (
                                    <Badge className="bg-green-100 text-green-800">
                                      AI Generated
                                    </Badge>
                                  )}
                                </div>
                              </div>
                              
                              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                                <div>
                                  <p className="text-xs text-gray-500">Due Date</p>
                                  <p className={`text-sm font-medium ${dueStatus.color}`}>
                                    {new Date(return_.dueDate).toLocaleDateString()}
                                  </p>
                                </div>
                                <div>
                                  <p className="text-xs text-gray-500">Amount</p>
                                  <p className="text-sm font-medium">{formatCurrency(return_.amount)}</p>
                                </div>
                                <div>
                                  <p className="text-xs text-gray-500">Penalty</p>
                                  <p className="text-sm font-medium text-red-600">
                                    {return_.penalty ? formatCurrency(return_.penalty) : 'None'}
                                  </p>
                                </div>
                              </div>
                              
                              <div className="flex gap-2">
                                <Button
                                  size="sm"
                                  variant="outline"
                                  className="text-blue-600 hover:text-blue-700"
                                >
                                  <Eye className="h-4 w-4 mr-2" />
                                  View Details
                                </Button>
                                <Button
                                  size="sm"
                                  variant="outline"
                                  className="text-green-600 hover:text-green-700"
                                >
                                  <Download className="h-4 w-4 mr-2" />
                                  Download
                                </Button>
                                {return_.status === 'Pending' && (
                                  <Button
                                    size="sm"
                                    onClick={() => fileTaxReturn(return_.id)}
                                    className="bg-[#607c47] hover:bg-[#4a6129] text-white"
                                  >
                                    <FileText className="h-4 w-4 mr-2" />
                                    File Return
                                  </Button>
                                )}
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    </CardContent>
                  </Card>
                </div>
              )}
            </div>
          </div>
        </div>
      </MainLayout>
    </AuthGuard>
  );
}
