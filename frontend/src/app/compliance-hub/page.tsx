'use client';

import { useEffect, useMemo, useState } from 'react';
import AuthGuard from '@/components/auth/AuthGuard';
import MainLayout from '@/components/layout/MainLayout';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/Badge';
import { formatCurrency } from '@/lib/utils';
import { 
  Shield,
  Calculator, 
  FileText, 
  AlertTriangle, 
  CheckCircle, 
  Calendar,
  TrendingUp,
  Receipt,
  Banknote,
  Clock,
  Download,
  Upload,
  Eye,
  Edit,
  Trash2,
  Bot,
  RefreshCcw,
  Search,
  Filter,
  Tags,
  CreditCard,
  Building,
  Camera,
  DollarSign,
  Tag,
  User,
  Image as ImageIcon,
  Zap,
  TrendingDown,
  XCircle,
} from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { cn } from '@/lib/utils';
import toast from 'react-hot-toast';

// Tax & Compliance interfaces
interface TaxReturn {
  id: string;
  type: 'GST' | 'TDS' | 'Income Tax';
  period: string;
  dueDate: string;
  status: 'Pending' | 'Filed' | 'Overdue';
  amount: number;
  penalty?: number;
  autoGenerated: boolean;
}

interface GSTCalculation {
  sales: number;
  purchases: number;
  outputTax: number;
  inputTax: number;
  netTax: number;
  cgst: number;
  sgst: number;
  igst: number;
}

interface TDSRecord {
  id: string;
  vendor: string;
  amount: number;
  tdsRate: number;
  tdsAmount: number;
  date: string;
  status: 'Pending' | 'Paid';
}

// Bookkeeping interfaces
interface BankTxn {
  id: string;
  date: string;
  description: string;
  amount: number;
  account: string;
  reconciled: boolean;
  category?: string;
  confidence?: number;
}

// Expense Management interfaces
interface ExpenseReceipt {
  id: string;
  fileName: string;
  uploadDate: string;
  amount: number;
  merchant: string;
  category: string;
  description: string;
  status: 'processing' | 'reviewed' | 'approved' | 'rejected';
  confidence: number;
  ocrText?: string;
  tags: string[];
  approver?: string;
  approvedDate?: string;
}


const MOCK_CATEGORIES = [
  'SaaS: Subscriptions',
  'Payroll: Salaries',
  'Marketing: Ads',
  'Operations: Rent',
  'Revenue: Sales',
  'Revenue: Refund',
  'Travel: Flights',
  'Office: Supplies',
];

export default function ComplianceHubPage() {
  const [activeTab, setActiveTab] = useState<'tax-compliance' | 'bookkeeping' | 'expense-management'>('tax-compliance');
  
  // Tax & Compliance state
  const [gstCalculation, setGstCalculation] = useState<GSTCalculation>({
    sales: 0,
    purchases: 0,
    outputTax: 0,
    inputTax: 0,
    netTax: 0,
    cgst: 0,
    sgst: 0,
    igst: 0
  });
  const [tdsRecords, setTdsRecords] = useState<TDSRecord[]>([]);
  const [taxReturns, setTaxReturns] = useState<TaxReturn[]>([]);
  const [isCalculating, setIsCalculating] = useState(false);

  // Bookkeeping state
  const [bankTxns, setBankTxns] = useState<BankTxn[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedAccount, setSelectedAccount] = useState<string>('all');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [isReconciling, setIsReconciling] = useState(false);

  // Expense Management state
  const [expenseReceipts, setExpenseReceipts] = useState<ExpenseReceipt[]>([]);
  const [expenseSearchTerm, setExpenseSearchTerm] = useState('');
  const [expenseStatusFilter, setExpenseStatusFilter] = useState<string>('all');
  const [isUploading, setIsUploading] = useState(false);
  const [selectedReceipt, setSelectedReceipt] = useState<ExpenseReceipt | null>(null);
  const [showReceiptModal, setShowReceiptModal] = useState(false);

  // Initialize mock data
  useEffect(() => {
    // Tax & Compliance mock data
    setTdsRecords([
      {
        id: '1',
        vendor: 'Tech Solutions Pvt Ltd',
        amount: 50000,
        tdsRate: 10,
        tdsAmount: 5000,
        date: '2024-01-15',
        status: 'Paid'
      },
      {
        id: '2',
        vendor: 'Marketing Agency Inc',
        amount: 25000,
        tdsRate: 10,
        tdsAmount: 2500,
        date: '2024-01-20',
        status: 'Pending'
      }
    ]);

    setTaxReturns([
      {
        id: '1',
        type: 'GST',
        period: 'Jan 2024',
        dueDate: '2024-02-20',
        status: 'Pending',
        amount: 15000,
        autoGenerated: true
      },
      {
        id: '2',
        type: 'TDS',
        period: 'Q4 2023',
        dueDate: '2024-01-31',
        status: 'Overdue',
        amount: 25000,
        penalty: 2500,
        autoGenerated: true
      },
      {
        id: '3',
        type: 'Income Tax',
        period: 'FY 2023-24',
        dueDate: '2024-07-31',
        status: 'Pending',
        amount: 75000,
        autoGenerated: false
      }
    ]);

    // Bookkeeping mock data
    setBankTxns([
      {
        id: '1',
        date: '2024-01-20',
        description: 'Payment from Client ABC Corp',
        amount: 5000,
        account: 'Business Checking',
        reconciled: true,
        category: 'Revenue: Sales',
        confidence: 95
      },
      {
        id: '2',
        date: '2024-01-19',
        description: 'Office Rent Payment',
        amount: -1200,
        account: 'Business Checking',
        reconciled: false,
        category: 'Operations: Rent',
        confidence: 88
      },
      {
        id: '3',
        date: '2024-01-18',
        description: 'Software Subscription - Adobe',
        amount: -50,
        account: 'Business Checking',
        reconciled: true,
        category: 'SaaS: Subscriptions',
        confidence: 92
      },
      {
        id: '4',
        date: '2024-01-17',
        description: 'Employee Salary - John Doe',
        amount: -3000,
        account: 'Business Checking',
        reconciled: false,
        category: 'Payroll: Salaries',
        confidence: 90
      },
      {
        id: '5',
        date: '2024-01-16',
        description: 'Google Ads Campaign',
        amount: -500,
        account: 'Business Checking',
        reconciled: true,
        category: 'Marketing: Ads',
        confidence: 85
      }
    ]);

    // Expense Management mock data
    setExpenseReceipts([
      {
        id: '1',
        fileName: 'invoice_saas_image_generation_20240120.pdf',
        uploadDate: '2024-01-20',
        amount: 180.00,
        merchant: 'Midjourney',
        category: 'Software: AI Tools',
        description: 'SAAS for Cloud based Image Generation Platform',
        status: 'approved',
        confidence: 95,
        ocrText: 'Midjourney\nInvoice #INV-2024-004\nDate: 10/21/2025\nDescription: SAAS for Cloud based Image Generation Platform\nAmount: ₹15,000\nPayment Method: Credit Card',
        tags: ['software', 'ai-tools', 'midjourney'],
        approver: 'John Smith',
        approvedDate: '2024-01-21'
      },
      {
        id: '2',
        fileName: 'receipt_travel_flight_20240119.jpg',
        uploadDate: '2024-01-19',
        amount: 450.00,
        merchant: 'Delta Airlines',
        category: 'Travel: Flights',
        description: 'Business trip flight',
        status: 'reviewed',
        confidence: 88,
        ocrText: 'Delta Airlines\nFlight DL1234\nTotal: ₹37,500',
        tags: ['travel', 'flight']
      },
      {
        id: '3',
        fileName: 'receipt_software_subscription_20240118.pdf',
        uploadDate: '2024-01-18',
        amount: 29.99,
        merchant: 'Adobe Creative Cloud',
        category: 'SaaS: Subscriptions',
        description: 'Monthly subscription',
        status: 'processing',
        confidence: 95,
        ocrText: 'Adobe Creative Cloud\nMonthly Plan\nTotal: $29.99',
        tags: ['software', 'subscription']
      }
    ]);
  }, []);

  // Tax & Compliance functions
  const calculateGST = async () => {
    setIsCalculating(true);
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const outputTax = gstCalculation.sales * 0.18;
    const inputTax = gstCalculation.purchases * 0.18;
    const netTax = outputTax - inputTax;
    
    setGstCalculation(prev => ({
      ...prev,
      outputTax,
      inputTax,
      netTax,
      cgst: netTax / 2,
      sgst: netTax / 2,
      igst: netTax
    }));
    
    setIsCalculating(false);
    toast.success('GST calculation completed!');
  };

  const addTDSRecord = () => {
    const newRecord: TDSRecord = {
      id: Date.now().toString(),
      vendor: 'New Vendor',
      amount: 0,
      tdsRate: 10,
      tdsAmount: 0,
      date: new Date().toISOString().split('T')[0],
      status: 'Pending'
    };
    setTdsRecords(prev => [...prev, newRecord]);
    toast.success('TDS record added');
  };

  const fileTaxReturn = (id: string) => {
    setTaxReturns(prev => prev.map(return_ => 
      return_.id === id ? { ...return_, status: 'Filed' as const } : return_
    ));
    toast.success('Tax return filed successfully!');
  };

  // Bookkeeping functions
  const handleReconcileAll = async () => {
    setIsReconciling(true);
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    setBankTxns(prev => prev.map(txn => ({ ...txn, reconciled: true })));
    toast.success('All transactions reconciled!');
    setIsReconciling(false);
  };

  const updateTxnCategory = (id: string, category: string) => {
    setBankTxns(prev => prev.map(txn => 
      txn.id === id ? { ...txn, category } : txn
    ));
    toast.success('Category updated');
  };

  // Expense Management functions
  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files || files.length === 0) return;

    setIsUploading(true);
    
    // Simulate OCR processing time
    await new Promise(resolve => setTimeout(resolve, 3000));

    const newReceipts: ExpenseReceipt[] = Array.from(files).map((file, index) => {
      // Generate realistic mock data based on file name or random selection
      const mockMerchants = [
        'Microsoft Azure', 'Google Cloud Platform', 'AWS', 'Salesforce', 'Adobe Creative Cloud',
        'Slack', 'Zoom', 'Dropbox', 'GitHub', 'DigitalOcean', 'Stripe', 'PayPal',
        'OpenAI', 'Anthropic', 'Midjourney', 'Stability AI', 'Runway ML', 'Canva Pro',
        'Figma', 'Notion', 'Airtable', 'HubSpot', 'Mailchimp', 'Intercom',
        'Office Depot', 'Staples', 'Amazon Business', 'Uber', 'Lyft', 'Airbnb', 
        'Hilton Hotels', 'Marriott', 'Delta Airlines', 'United Airlines',
        'Starbucks', 'McDonald\'s', 'Subway', 'Chipotle', 'FedEx', 'UPS',
        'Verizon', 'AT&T'
      ];
      
      const mockCategories = [
        'Software: Subscriptions', 'Software: AI Tools', 'Software: Cloud Services',
        'Software: Development Tools', 'Software: Design Tools', 'Software: Analytics',
        'Office: Supplies', 'Travel: Transportation', 'Travel: Accommodation', 
        'Meals: Business', 'Meals: Entertainment', 'Marketing: Advertising', 
        'Professional: Services', 'Utilities: Internet', 'Utilities: Phone', 
        'Equipment: Hardware', 'Training: Courses', 'Legal: Services', 
        'Accounting: Services', 'Insurance: Business'
      ];

      const mockDescriptions = [
        'SAAS for Cloud based Image Generation Platform', 'AI-powered content creation tools',
        'Cloud hosting and infrastructure services', 'Software subscription renewal',
        'AI model access and API usage', 'Design and collaboration platform',
        'Business intelligence and analytics tools', 'Customer relationship management',
        'Marketing automation platform', 'Communication and productivity tools',
        'Office supplies and stationery', 'Business travel expenses', 'Client entertainment',
        'Marketing campaign costs', 'Professional development', 'Equipment maintenance', 
        'Conference attendance', 'Team building activity', 'Business meal with client', 
        'Cloud hosting services', 'Legal consultation', 'Accounting services', 
        'Insurance premium', 'Training and certification'
      ];

      const merchant = mockMerchants[Math.floor(Math.random() * mockMerchants.length)];
      const category = mockCategories[Math.floor(Math.random() * mockCategories.length)];
      const description = mockDescriptions[Math.floor(Math.random() * mockDescriptions.length)];
      
      // Generate realistic amount based on category
      let amount = 0;
      if (category.includes('Software') || category.includes('AI Tools')) {
        amount = Math.random() * 66000 + 4200; // ₹4,200-₹70,200 for software/AI services
      } else if (category.includes('Travel')) {
        amount = Math.random() * 83000 + 4200; // ₹4,200-₹87,200
      } else if (category.includes('Meals')) {
        amount = Math.random() * 17000 + 850; // ₹850-₹18,500
      } else if (category.includes('Office')) {
        amount = Math.random() * 25000 + 1250; // ₹1,250-₹26,250
      } else {
        amount = Math.random() * 33000 + 2100; // ₹2,100-₹35,100
      }

      // Generate realistic OCR text based on merchant type
      let ocrText = '';
      if (merchant.includes('AI') || merchant.includes('OpenAI') || merchant.includes('Midjourney')) {
        ocrText = `${merchant}\nInvoice #${Math.floor(Math.random() * 99999) + 10000}\nDate: ${new Date().toLocaleDateString()}\nDescription: ${description}\nAmount: ₹${amount.toFixed(0)}\nPayment Method: Credit Card`;
      } else if (merchant.includes('Cloud') || merchant.includes('AWS') || merchant.includes('Azure')) {
        ocrText = `${merchant}\nService Invoice\nInvoice #${Math.floor(Math.random() * 99999) + 10000}\nBilling Period: ${new Date().toLocaleDateString()}\nService: ${description}\nTotal: ₹${amount.toFixed(0)}`;
      } else {
        ocrText = `${merchant}\nReceipt #${Math.floor(Math.random() * 99999) + 10000}\nDate: ${new Date().toLocaleDateString()}\nTotal: ₹${amount.toFixed(0)}\n${description}`;
      }

      return {
        id: Date.now().toString() + index,
        fileName: file.name,
        uploadDate: new Date().toISOString().split('T')[0],
        amount: Math.round(amount * 100) / 100, // Round to 2 decimal places
        merchant,
        category,
        description,
        status: 'reviewed' as const, // Start as reviewed for better UX
        confidence: Math.floor(Math.random() * 20) + 80, // 80-99% confidence
        ocrText,
        tags: [category.split(':')[0].toLowerCase(), merchant.toLowerCase().replace(/\s+/g, '-')],
        approver: undefined,
        approvedDate: undefined
      };
    });

    setExpenseReceipts(prev => [...newReceipts, ...prev]);
    toast.success(`${files.length} receipt(s) processed successfully! AI extracted data with high confidence.`);
    setIsUploading(false);
  };

  const approveExpense = (id: string) => {
    setExpenseReceipts(prev => prev.map(receipt => 
      receipt.id === id 
        ? { ...receipt, status: 'approved' as const, approver: 'Current User', approvedDate: new Date().toISOString().split('T')[0] }
        : receipt
    ));
    toast.success('Expense approved');
  };

  const rejectExpense = (id: string) => {
    setExpenseReceipts(prev => prev.map(receipt => 
      receipt.id === id ? { ...receipt, status: 'rejected' as const } : receipt
    ));
    toast.success('Expense rejected');
  };

  const viewReceiptDetails = (receipt: ExpenseReceipt) => {
    setSelectedReceipt(receipt);
    setShowReceiptModal(true);
  };

  // Filtered data
  const filteredTxns = useMemo(() => {
    return bankTxns.filter(txn => {
      const matchesSearch = txn.description.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesAccount = selectedAccount === 'all' || txn.account === selectedAccount;
      const matchesCategory = selectedCategory === 'all' || txn.category === selectedCategory;
      return matchesSearch && matchesAccount && matchesCategory;
    });
  }, [bankTxns, searchTerm, selectedAccount, selectedCategory]);

  const filteredReceipts = useMemo(() => {
    return expenseReceipts.filter(receipt => {
      const matchesSearch = receipt.fileName.toLowerCase().includes(expenseSearchTerm.toLowerCase()) ||
                           receipt.merchant.toLowerCase().includes(expenseSearchTerm.toLowerCase());
      const matchesStatus = expenseStatusFilter === 'all' || receipt.status === expenseStatusFilter;
      return matchesSearch && matchesStatus;
    });
  }, [expenseReceipts, expenseSearchTerm, expenseStatusFilter]);

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-IN', {
      style: 'currency',
      currency: 'INR',
      minimumFractionDigits: 0,
    }).format(amount);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Pending': return 'bg-yellow-100 text-yellow-800';
      case 'Filed': return 'bg-green-100 text-green-800';
      case 'Overdue': return 'bg-red-100 text-red-800';
      case 'Paid': return 'bg-green-100 text-green-800';
      case 'processing': return 'bg-blue-100 text-blue-800';
      case 'reviewed': return 'bg-yellow-100 text-yellow-800';
      case 'approved': return 'bg-green-100 text-green-800';
      case 'rejected': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getDueDateStatus = (dueDate: string) => {
    const today = new Date();
    const due = new Date(dueDate);
    const diffDays = Math.ceil((due.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
    
    if (diffDays < 0) return { status: 'Overdue', color: 'text-red-600' };
    if (diffDays <= 7) return { status: 'Due Soon', color: 'text-orange-600' };
    return { status: 'Upcoming', color: 'text-green-600' };
  };

  return (
    <AuthGuard requireAuth={true}>
      <MainLayout>
        <div className="bg-gray-50 flex">
          <div className="flex-1 overflow-y-auto custom-scrollbar">
            <div className="p-4 md:p-8 space-y-4 md:space-y-6">
              {/* Header */}
              <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
                <div>
                  <h1 className="text-2xl md:text-3xl font-bold text-[#2C2C2C] flex items-center gap-2">
                    <Shield className="h-8 w-8 text-[#607c47]" />
                    Compliance Hub
                  </h1>
                  <p className="text-sm text-[#2C2C2C]/70 mt-1">
                    Comprehensive compliance management: Tax, Bookkeeping, and Expense tracking
                  </p>
                </div>
                <div className="flex gap-3">
                  <Button className="bg-[#607c47] hover:bg-[#4a6129] text-white">
                    <Upload className="h-4 w-4 mr-2" />
                    Upload Documents
                  </Button>
                  <Button className="bg-blue-600 hover:bg-blue-700 text-white">
                    <Shield className="h-4 w-4 mr-2" />
                    Compliance Check
                  </Button>
                </div>
              </div>

              {/* AI Status Banner */}
              <div className="bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-xl p-4 mb-6">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className="p-2 bg-green-100 rounded-lg">
                      <Shield className="h-5 w-5 text-green-600" />
                    </div>
                    <div>
                      <h3 className="font-semibold text-green-900">AI Compliance Assistant</h3>
                      <p className="text-sm text-green-700">Automated calculations • Smart categorization • Compliance monitoring</p>
                    </div>
                  </div>
                  <div className="flex items-center gap-2 text-sm text-green-600">
                    <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                    Active Monitoring
                  </div>
                </div>
              </div>

              {/* Tabs */}
              <div className="flex gap-2 border-b border-gray-200">
                <Button
                  onClick={() => setActiveTab('tax-compliance')}
                  variant={activeTab === 'tax-compliance' ? 'default' : 'ghost'}
                  className={activeTab === 'tax-compliance' ? 'bg-[#607c47] hover:bg-[#4a6129] text-white' : 'text-[#2C2C2C] hover:bg-gray-100'}
                >
                  <Calculator className="h-4 w-4 mr-2" />
                  Tax & Compliance
                </Button>
                <Button
                  onClick={() => setActiveTab('bookkeeping')}
                  variant={activeTab === 'bookkeeping' ? 'default' : 'ghost'}
                  className={activeTab === 'bookkeeping' ? 'bg-[#607c47] hover:bg-[#4a6129] text-white' : 'text-[#2C2C2C] hover:bg-gray-100'}
                >
                  <FileText className="h-4 w-4 mr-2" />
                  Bookkeeping
                </Button>
                <Button
                  onClick={() => setActiveTab('expense-management')}
                  variant={activeTab === 'expense-management' ? 'default' : 'ghost'}
                  className={activeTab === 'expense-management' ? 'bg-[#607c47] hover:bg-[#4a6129] text-white' : 'text-[#2C2C2C] hover:bg-gray-100'}
                >
                  <Receipt className="h-4 w-4 mr-2" />
                  Expense Management
                </Button>
              </div>

              {/* Tax & Compliance Tab */}
              {activeTab === 'tax-compliance' && (
                <div className="space-y-6">
                  {/* Key Metrics */}
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <Card className="rounded-xl border-0 shadow-lg bg-gradient-to-br from-blue-50 to-cyan-50">
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-blue-100 rounded-lg">
                            <Calculator className="h-5 w-5 text-blue-600" />
                          </div>
                          <div>
                            <div className="text-sm text-blue-700">GST Payable</div>
                            <div className="text-lg font-bold text-blue-900">
                              {formatCurrency(gstCalculation.netTax)}
                            </div>
                            <div className="text-xs text-blue-600">Current Period</div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>

                    <Card className="rounded-xl border-0 shadow-lg bg-gradient-to-br from-green-50 to-emerald-50">
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-green-100 rounded-lg">
                            <Banknote className="h-5 w-5 text-green-600" />
                          </div>
                          <div>
                            <div className="text-sm text-green-700">TDS Collected</div>
                            <div className="text-lg font-bold text-green-900">
                              {formatCurrency(tdsRecords.reduce((sum, record) => sum + record.tdsAmount, 0))}
                            </div>
                            <div className="text-xs text-green-600">This Month</div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>

                    <Card className="rounded-xl border-0 shadow-lg bg-gradient-to-br from-orange-50 to-red-50">
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-orange-100 rounded-lg">
                            <AlertTriangle className="h-5 w-5 text-orange-600" />
                          </div>
                          <div>
                            <div className="text-sm text-orange-700">Overdue Returns</div>
                            <div className="text-lg font-bold text-orange-900">
                              {taxReturns.filter(r => r.status === 'Overdue').length}
                            </div>
                            <div className="text-xs text-orange-600">Requires Attention</div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>

                    <Card className="rounded-xl border-0 shadow-lg bg-gradient-to-br from-purple-50 to-indigo-50">
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-purple-100 rounded-lg">
                            <CheckCircle className="h-5 w-5 text-purple-600" />
                          </div>
                          <div>
                            <div className="text-sm text-purple-700">Compliance Score</div>
                            <div className="text-lg font-bold text-purple-900">92%</div>
                            <div className="text-xs text-purple-600">Excellent</div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </div>

                  {/* GST Calculator */}
                  <Card className="rounded-xl border-0 shadow-lg bg-white">
                    <CardHeader className="pb-3">
                      <CardTitle className="text-lg font-medium text-[#2C2C2C] flex items-center gap-2">
                        <Calculator className="h-5 w-5 text-[#607c47]" />
                        AI-Powered GST Calculator
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="pt-0">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div className="space-y-4">
                          <div>
                            <Label htmlFor="sales" className="text-sm font-medium text-[#2C2C2C]">
                              Total Sales (₹)
                            </Label>
                            <Input
                              id="sales"
                              type="number"
                              value={gstCalculation.sales}
                              onChange={(e) => setGstCalculation(prev => ({ ...prev, sales: Number(e.target.value) }))}
                              className="mt-2 bg-white"
                              placeholder="Enter total sales amount"
                            />
                          </div>
                          <div>
                            <Label htmlFor="purchases" className="text-sm font-medium text-[#2C2C2C]">
                              Total Purchases (₹)
                            </Label>
                            <Input
                              id="purchases"
                              type="number"
                              value={gstCalculation.purchases}
                              onChange={(e) => setGstCalculation(prev => ({ ...prev, purchases: Number(e.target.value) }))}
                              className="mt-2 bg-white"
                              placeholder="Enter total purchases amount"
                            />
                          </div>
                          <Button
                            onClick={calculateGST}
                            disabled={isCalculating}
                            className="w-full bg-[#607c47] hover:bg-[#4a6129] text-white"
                          >
                            {isCalculating ? (
                              <>
                                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2" />
                                Calculating...
                              </>
                            ) : (
                              <>
                                <Calculator className="h-4 w-4 mr-2" />
                                Calculate GST
                              </>
                            )}
                          </Button>
                        </div>
                        
                        <div className="space-y-4">
                          <div className="bg-gray-50 rounded-lg p-4">
                            <h4 className="font-semibold text-[#2C2C2C] mb-3">GST Breakdown</h4>
                            <div className="space-y-2">
                              <div className="flex justify-between">
                                <span className="text-sm text-gray-600">Output Tax (18%)</span>
                                <span className="font-medium">{formatCurrency(gstCalculation.outputTax)}</span>
                              </div>
                              <div className="flex justify-between">
                                <span className="text-sm text-gray-600">Input Tax (18%)</span>
                                <span className="font-medium">{formatCurrency(gstCalculation.inputTax)}</span>
                              </div>
                              <div className="border-t pt-2 flex justify-between">
                                <span className="font-semibold text-[#2C2C2C]">Net GST Payable</span>
                                <span className="font-bold text-[#607c47]">{formatCurrency(gstCalculation.netTax)}</span>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Tax Returns */}
                  <Card className="rounded-xl border-0 shadow-lg bg-white">
                    <CardHeader className="pb-3">
                      <CardTitle className="text-lg font-medium text-[#2C2C2C] flex items-center gap-2">
                        <FileText className="h-5 w-5 text-[#607c47]" />
                        Tax Returns Management
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="pt-0">
                      <div className="space-y-4">
                        {taxReturns.map((return_) => {
                          const dueStatus = getDueDateStatus(return_.dueDate);
                          return (
                            <div key={return_.id} className="border border-gray-200 rounded-lg p-4">
                              <div className="flex items-center justify-between mb-3">
                                <div className="flex items-center gap-3">
                                  <div className="p-2 bg-blue-100 rounded-lg">
                                    <FileText className="h-5 w-5 text-blue-600" />
                                  </div>
                                  <div>
                                    <h4 className="font-semibold text-[#2C2C2C]">{return_.type} Return</h4>
                                    <p className="text-sm text-gray-600">{return_.period}</p>
                                  </div>
                                </div>
                                <div className="flex items-center gap-3">
                                  <Badge className={getStatusColor(return_.status)}>
                                    {return_.status}
                                  </Badge>
                                  {return_.autoGenerated && (
                                    <Badge className="bg-green-100 text-green-800">
                                      AI Generated
                                    </Badge>
                                  )}
                                </div>
                              </div>
                              
                              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                                <div>
                                  <p className="text-xs text-gray-500">Due Date</p>
                                  <p className={`text-sm font-medium ${dueStatus.color}`}>
                                    {new Date(return_.dueDate).toLocaleDateString()}
                                  </p>
                                </div>
                                <div>
                                  <p className="text-xs text-gray-500">Amount</p>
                                  <p className="text-sm font-medium">{formatCurrency(return_.amount)}</p>
                                </div>
                                <div>
                                  <p className="text-xs text-gray-500">Penalty</p>
                                  <p className="text-sm font-medium text-red-600">
                                    {return_.penalty ? formatCurrency(return_.penalty) : 'None'}
                                  </p>
                                </div>
                              </div>
                              
                              <div className="flex gap-2">
                                <Button
                                  size="sm"
                                  variant="outline"
                                  className="text-blue-600 hover:text-blue-700"
                                >
                                  <Eye className="h-4 w-4 mr-2" />
                                  View Details
                                </Button>
                                <Button
                                  size="sm"
                                  variant="outline"
                                  className="text-green-600 hover:text-green-700"
                                >
                                  <Download className="h-4 w-4 mr-2" />
                                  Download
                                </Button>
                                {return_.status === 'Pending' && (
                                  <Button
                                    size="sm"
                                    onClick={() => fileTaxReturn(return_.id)}
                                    className="bg-[#607c47] hover:bg-[#4a6129] text-white"
                                  >
                                    <FileText className="h-4 w-4 mr-2" />
                                    File Return
                                  </Button>
                                )}
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    </CardContent>
                  </Card>
                </div>
              )}

              {/* Bookkeeping Tab */}
              {activeTab === 'bookkeeping' && (
                <div className="space-y-6">
                  {/* KPIs */}
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <Card className="bg-white rounded-xl border-0 shadow-lg">
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-green-100 rounded-lg">
                            <TrendingUp className="h-5 w-5 text-green-600" />
                          </div>
                          <div>
                            <div className="text-sm text-green-700">Inflow</div>
                            <div className="text-lg font-bold text-green-900">
                              {formatCurrency(filteredTxns.filter(t => t.amount > 0).reduce((sum, t) => sum + t.amount, 0))}
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>

                    <Card className="bg-white rounded-xl border-0 shadow-lg">
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-red-100 rounded-lg">
                            <TrendingDown className="h-5 w-5 text-red-600" />
                          </div>
                          <div>
                            <div className="text-sm text-red-700">Outflow</div>
                            <div className="text-lg font-bold text-red-900">
                              {formatCurrency(Math.abs(filteredTxns.filter(t => t.amount < 0).reduce((sum, t) => sum + t.amount, 0)))}
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>

                    <Card className="bg-white rounded-xl border-0 shadow-lg">
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-blue-100 rounded-lg">
                            <Tags className="h-5 w-5 text-blue-600" />
                          </div>
                          <div>
                            <div className="text-sm text-blue-700">Categorized</div>
                            <div className="text-lg font-bold text-blue-900">
                              {filteredTxns.filter(t => t.category).length}
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>

                    <Card className="bg-white rounded-xl border-0 shadow-lg">
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-purple-100 rounded-lg">
                            <CheckCircle className="h-5 w-5 text-purple-600" />
                          </div>
                          <div>
                            <div className="text-sm text-purple-700">Reconciled</div>
                            <div className="text-lg font-bold text-purple-900">
                              {filteredTxns.filter(t => t.reconciled).length}
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </div>

                  {/* Filters and Actions */}
                  <Card className="bg-white rounded-xl border-0 shadow-lg">
                    <CardHeader className="pb-3">
                      <div className="flex items-center justify-between">
                        <CardTitle className="text-lg font-medium text-[#2C2C2C]">
                          Bank Transactions ({filteredTxns.length})
                        </CardTitle>
                        <div className="flex gap-2">
                          <Button
                            onClick={handleReconcileAll}
                            disabled={isReconciling}
                            className="bg-[#607c47] hover:bg-[#4a6129] text-white"
                          >
                            {isReconciling ? (
                              <>
                                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2" />
                                Reconciling...
                              </>
                            ) : (
                              <>
                                <RefreshCcw className="h-4 w-4 mr-2" />
                                Reconcile All
                              </>
                            )}
                          </Button>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent className="pt-0">
                      <div className="flex gap-4 mb-4">
                        <div className="flex-1">
                          <Input
                            placeholder="Search transactions..."
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            className="bg-white"
                          />
                        </div>
                        <Select value={selectedAccount} onValueChange={setSelectedAccount}>
                          <SelectTrigger className="w-40">
                            <SelectValue placeholder="All Accounts" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="all">All Accounts</SelectItem>
                            <SelectItem value="Business Checking">Business Checking</SelectItem>
                            <SelectItem value="Business Savings">Business Savings</SelectItem>
                          </SelectContent>
                        </Select>
                        <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                          <SelectTrigger className="w-40">
                            <SelectValue placeholder="All Categories" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="all">All Categories</SelectItem>
                            {MOCK_CATEGORIES.map(cat => (
                              <SelectItem key={cat} value={cat}>{cat}</SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>

                      <div className="overflow-x-auto">
                        <Table>
                          <TableHeader>
                            <TableRow>
                              <TableHead>Date</TableHead>
                              <TableHead>Description</TableHead>
                              <TableHead>Amount</TableHead>
                              <TableHead>Account</TableHead>
                              <TableHead>Category</TableHead>
                              <TableHead>AI Confidence</TableHead>
                              <TableHead>Status</TableHead>
                              <TableHead>Actions</TableHead>
                            </TableRow>
                          </TableHeader>
                          <TableBody>
                            {filteredTxns.map((txn) => (
                              <TableRow key={txn.id} className="hover:bg-gray-50">
                                <TableCell className="text-[#2C2C2C]">
                                  {new Date(txn.date).toLocaleDateString()}
                                </TableCell>
                                <TableCell className="text-[#2C2C2C]">
                                  {txn.description}
                                </TableCell>
                                <TableCell className={`font-semibold ${
                                  txn.amount > 0 ? 'text-green-600' : 'text-red-600'
                                }`}>
                                  {txn.amount > 0 ? '+' : ''}{formatCurrency(txn.amount)}
                                </TableCell>
                                <TableCell className="text-[#2C2C2C]">
                                  {txn.account}
                                </TableCell>
                                <TableCell>
                                  <Select
                                    value={txn.category || ''}
                                    onValueChange={(value) => updateTxnCategory(txn.id, value)}
                                  >
                                    <SelectTrigger className="w-40">
                                      <SelectValue placeholder="Select category" />
                                    </SelectTrigger>
                                    <SelectContent>
                                      {MOCK_CATEGORIES.map(cat => (
                                        <SelectItem key={cat} value={cat}>{cat}</SelectItem>
                                      ))}
                                    </SelectContent>
                                  </Select>
                                </TableCell>
                                <TableCell>
                                  {txn.confidence && (
                                    <Badge className={
                                      txn.confidence >= 90 ? 'bg-green-100 text-green-800' :
                                      txn.confidence >= 70 ? 'bg-yellow-100 text-yellow-800' :
                                      'bg-red-100 text-red-800'
                                    }>
                                      {txn.confidence}%
                                    </Badge>
                                  )}
                                </TableCell>
                                <TableCell>
                                  <Badge className={txn.reconciled ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}>
                                    {txn.reconciled ? 'Reconciled' : 'Pending'}
                                  </Badge>
                                </TableCell>
                                <TableCell>
                                  <div className="flex gap-1">
                                    <Button variant="outline" size="sm" className="border-gray-300 text-[#2C2C2C]">
                                      <Eye className="h-4 w-4" />
                                    </Button>
                                    <Button variant="outline" size="sm" className="border-gray-300 text-[#2C2C2C]">
                                      <Edit className="h-4 w-4" />
                                    </Button>
                                  </div>
                                </TableCell>
                              </TableRow>
                            ))}
                          </TableBody>
                        </Table>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              )}

              {/* Expense Management Tab */}
              {activeTab === 'expense-management' && (
                <div className="space-y-6">
                  {/* Summary Stats */}
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <Card className="bg-white rounded-xl border-0 shadow-lg">
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-blue-100 rounded-lg">
                            <Receipt className="h-5 w-5 text-blue-600" />
                          </div>
                          <div>
                            <div className="text-sm text-blue-700">Total Expenses</div>
                            <div className="text-lg font-bold text-blue-900">
                              {formatCurrency(filteredReceipts.reduce((sum, r) => sum + r.amount, 0))}
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>

                    <Card className="bg-white rounded-xl border-0 shadow-lg">
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-yellow-100 rounded-lg">
                            <Clock className="h-5 w-5 text-yellow-600" />
                          </div>
                          <div>
                            <div className="text-sm text-yellow-700">Pending Approval</div>
                            <div className="text-lg font-bold text-yellow-900">
                              {filteredReceipts.filter(r => r.status === 'reviewed').length}
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>

                    <Card className="bg-white rounded-xl border-0 shadow-lg">
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-green-100 rounded-lg">
                            <CheckCircle className="h-5 w-5 text-green-600" />
                          </div>
                          <div>
                            <div className="text-sm text-green-700">Approved</div>
                            <div className="text-lg font-bold text-green-900">
                              {filteredReceipts.filter(r => r.status === 'approved').length}
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>

                    <Card className="bg-white rounded-xl border-0 shadow-lg">
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-purple-100 rounded-lg">
                            <Bot className="h-5 w-5 text-purple-600" />
                          </div>
                          <div>
                            <div className="text-sm text-purple-700">AI Processed</div>
                            <div className="text-lg font-bold text-purple-900">
                              {filteredReceipts.filter(r => r.confidence > 0).length}
                            </div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </div>

                  {/* Upload Section */}
                  <Card className="bg-white rounded-xl border-0 shadow-lg">
                    <CardHeader className="pb-3">
                      <CardTitle className="text-lg font-medium text-[#2C2C2C] flex items-center gap-2">
                        <Upload className="h-5 w-5 text-[#607c47]" />
                        Upload Receipts
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="pt-0">
                      <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                        <div className="flex flex-col items-center gap-4">
                          <div className="p-3 bg-blue-100 rounded-full">
                            <Camera className="h-8 w-8 text-blue-600" />
                          </div>
                          <div>
                            <h3 className="text-lg font-semibold text-[#2C2C2C]">Upload Receipt Images</h3>
                            <p className="text-sm text-gray-600">Drag and drop files or click to browse</p>
                          </div>
                          <div className="flex gap-2">
                            <input
                              type="file"
                              multiple
                              accept="image/*,.pdf"
                              onChange={handleFileUpload}
                              className="hidden"
                              id="receipt-upload"
                            />
                            <label
                              htmlFor="receipt-upload"
                              className="cursor-pointer bg-[#607c47] hover:bg-[#4a6129] text-white px-4 py-2 rounded-lg flex items-center gap-2"
                            >
                              {isUploading ? (
                                <>
                                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2" />
                                  Uploading...
                                </>
                              ) : (
                                <>
                                  <Upload className="h-4 w-4 mr-2" />
                                  Choose Files
                                </>
                              )}
                            </label>
                            <Button variant="outline" className="border-gray-300 text-[#2C2C2C]">
                              <Camera className="h-4 w-4 mr-2" />
                              Take Photo
                            </Button>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Expense List */}
                  <Card className="bg-white rounded-xl border-0 shadow-lg">
                    <CardHeader className="pb-3">
                      <div className="flex items-center justify-between">
                        <CardTitle className="text-lg font-medium text-[#2C2C2C]">
                          Expense Receipts ({filteredReceipts.length})
                        </CardTitle>
                        <div className="flex gap-2">
                          <div className="relative">
                            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400" />
                            <Input
                              placeholder="Search receipts..."
                              value={expenseSearchTerm}
                              onChange={(e) => setExpenseSearchTerm(e.target.value)}
                              className="pl-10 bg-white w-64"
                            />
                          </div>
                          <Select value={expenseStatusFilter} onValueChange={setExpenseStatusFilter}>
                            <SelectTrigger className="w-40">
                              <SelectValue placeholder="All Status" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="all">All Status</SelectItem>
                              <SelectItem value="processing">Processing</SelectItem>
                              <SelectItem value="reviewed">Reviewed</SelectItem>
                              <SelectItem value="approved">Approved</SelectItem>
                              <SelectItem value="rejected">Rejected</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent className="pt-0">
                      <div className="overflow-x-auto">
                        <Table>
                          <TableHeader>
                            <TableRow>
                              <TableHead>Receipt</TableHead>
                              <TableHead>Amount</TableHead>
                              <TableHead>Merchant</TableHead>
                              <TableHead>Category</TableHead>
                              <TableHead>AI Confidence</TableHead>
                              <TableHead>Status</TableHead>
                              <TableHead>Actions</TableHead>
                            </TableRow>
                          </TableHeader>
                          <TableBody>
                            {filteredReceipts.map((receipt) => (
                              <TableRow key={receipt.id} className="hover:bg-gray-50">
                                <TableCell>
                                  <div className="flex items-center gap-2">
                                    <div className="w-8 h-8 bg-gray-100 rounded flex items-center justify-center">
                                      <FileText className="h-4 w-4 text-gray-600" />
                                    </div>
                                    <div>
                                      <div className="font-medium text-[#2C2C2C] text-sm">
                                        {receipt.fileName}
                                      </div>
                                      <div className="text-xs text-gray-500">
                                        {receipt.uploadDate}
                                      </div>
                                    </div>
                                  </div>
                                </TableCell>
                                <TableCell className="font-semibold text-[#2C2C2C]">
                                  {formatCurrency(receipt.amount)}
                                </TableCell>
                                <TableCell className="text-[#2C2C2C]">
                                  {receipt.merchant}
                                </TableCell>
                                <TableCell>
                                  <Badge variant="outline" className="border-gray-300 text-gray-700">
                                    {receipt.category}
                                  </Badge>
                                </TableCell>
                                <TableCell>
                                  {receipt.confidence > 0 && (
                                    <Badge className={
                                      receipt.confidence >= 90 ? 'bg-green-100 text-green-800' :
                                      receipt.confidence >= 70 ? 'bg-yellow-100 text-yellow-800' :
                                      'bg-red-100 text-red-800'
                                    }>
                                      {receipt.confidence}%
                                    </Badge>
                                  )}
                                </TableCell>
                                <TableCell>
                                  <Badge className={getStatusColor(receipt.status)}>
                                    {receipt.status}
                                  </Badge>
                                </TableCell>
                                <TableCell>
                                  <div className="flex gap-1">
                                    <Button 
                                      variant="outline" 
                                      size="sm" 
                                      className="border-gray-300 text-[#2C2C2C]"
                                      onClick={() => viewReceiptDetails(receipt)}
                                    >
                                      <Eye className="h-4 w-4" />
                                    </Button>
                                    {receipt.status === 'reviewed' && (
                                      <>
                                        <Button
                                          variant="outline"
                                          size="sm"
                                          onClick={() => approveExpense(receipt.id)}
                                          className="border-green-300 text-green-600 hover:bg-green-50"
                                        >
                                          <CheckCircle className="h-4 w-4" />
                                        </Button>
                                        <Button
                                          variant="outline"
                                          size="sm"
                                          onClick={() => rejectExpense(receipt.id)}
                                          className="border-red-300 text-red-600 hover:bg-red-50"
                                        >
                                          <XCircle className="h-4 w-4" />
                                        </Button>
                                      </>
                                    )}
                                  </div>
                                </TableCell>
                              </TableRow>
                            ))}
                          </TableBody>
                        </Table>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Receipt Details Modal */}
        {showReceiptModal && selectedReceipt && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-xl p-6 max-w-4xl w-[90vw] max-h-[90vh] overflow-y-auto">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold text-[#2C2C2C]">Receipt Details</h3>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setShowReceiptModal(false)}
                  className="border-gray-300 text-[#2C2C2C]"
                >
                  <XCircle className="h-4 w-4" />
                </Button>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Left Column - Receipt Info */}
                <div className="space-y-4">
                  <div>
                    <label className="text-sm font-medium text-gray-600">File Name</label>
                    <div className="p-2 bg-gray-50 rounded text-sm text-gray-900">{selectedReceipt.fileName}</div>
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium text-gray-600">Merchant</label>
                    <div className="p-2 bg-gray-50 rounded text-sm text-gray-900">{selectedReceipt.merchant}</div>
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium text-gray-600">Amount</label>
                    <div className="p-2 bg-gray-50 rounded text-sm font-semibold text-gray-900">{formatCurrency(selectedReceipt.amount)}</div>
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium text-gray-600">Category</label>
                    <div className="p-2 bg-gray-50 rounded text-sm text-gray-900">{selectedReceipt.category}</div>
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium text-gray-600">Description</label>
                    <div className="p-2 bg-gray-50 rounded text-sm text-gray-900">{selectedReceipt.description}</div>
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium text-gray-600">Upload Date</label>
                    <div className="p-2 bg-gray-50 rounded text-sm text-gray-900">{selectedReceipt.uploadDate}</div>
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium text-gray-600">Status</label>
                    <div className="p-2">
                      <Badge className={getStatusColor(selectedReceipt.status)} style={{ color: '#1f2937' }}>
                        {selectedReceipt.status}
                      </Badge>
                    </div>
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium text-gray-600">AI Confidence</label>
                    <div className="p-2">
                      <Badge className={
                        selectedReceipt.confidence >= 90 ? 'bg-green-100 text-green-800' :
                        selectedReceipt.confidence >= 70 ? 'bg-yellow-100 text-yellow-800' :
                        'bg-red-100 text-red-800'
                      } style={{ color: '#1f2937' }}>
                        {selectedReceipt.confidence}%
                      </Badge>
                    </div>
                  </div>
                </div>

                {/* Right Column - OCR Text */}
                <div className="space-y-4">
                  <div>
                    <label className="text-sm font-medium text-gray-600">OCR Extracted Text</label>
                    <div className="p-3 bg-gray-50 rounded text-sm font-mono whitespace-pre-wrap max-h-60 overflow-y-auto text-gray-900">
                      {selectedReceipt.ocrText}
                    </div>
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium text-gray-600">Tags</label>
                    <div className="flex flex-wrap gap-1">
                      {selectedReceipt.tags.map((tag, index) => (
                        <Badge key={index} variant="outline" className="text-xs text-gray-900 border-gray-300">
                          {tag}
                        </Badge>
                      ))}
                    </div>
                  </div>
                  
                  {selectedReceipt.approver && (
                    <div>
                      <label className="text-sm font-medium text-gray-600">Approved By</label>
                      <div className="p-2 bg-gray-50 rounded text-sm text-gray-900">{selectedReceipt.approver}</div>
                    </div>
                  )}
                  
                  {selectedReceipt.approvedDate && (
                    <div>
                      <label className="text-sm font-medium text-gray-600">Approved Date</label>
                      <div className="p-2 bg-gray-50 rounded text-sm text-gray-900">{selectedReceipt.approvedDate}</div>
                    </div>
                  )}
                </div>
              </div>

              <div className="flex gap-2 mt-6">
                {selectedReceipt.status === 'reviewed' && (
                  <>
                    <Button
                      onClick={() => {
                        approveExpense(selectedReceipt.id);
                        setShowReceiptModal(false);
                      }}
                      className="bg-green-600 hover:bg-green-700 text-white"
                    >
                      <CheckCircle className="h-4 w-4 mr-2" />
                      Approve
                    </Button>
                    <Button
                      variant="outline"
                      onClick={() => {
                        rejectExpense(selectedReceipt.id);
                        setShowReceiptModal(false);
                      }}
                      className="border-red-300 text-red-600 hover:bg-red-50"
                    >
                      <XCircle className="h-4 w-4 mr-2" />
                      Reject
                    </Button>
                  </>
                )}
                <Button
                  variant="outline"
                  onClick={() => setShowReceiptModal(false)}
                  className="border-gray-300 text-[#2C2C2C]"
                >
                  Close
                </Button>
              </div>
            </div>
          </div>
        )}
      </MainLayout>
    </AuthGuard>
  );
}
