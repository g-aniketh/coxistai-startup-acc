generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// MULTI-TENANCY CORE MODELS
// ============================================================================

model Startup {
  id                 String   @id @default(cuid())
  name               String
  subscriptionPlan   String   @default("pro_trial") // pro_trial, starter, pro, enterprise
  subscriptionStatus String   @default("active") // active, cancelled, expired
  trialEndsAt        DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  users            User[]
  mockBankAccounts MockBankAccount[]
  transactions     Transaction[]
  products         Product[]
  sales            Sale[]
  cashflowMetrics  CashflowMetric[]
  scenarios        AIScenario[]
  alerts           Alert[]
  investorUpdates  InvestorUpdate[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startupId String
  startup   Startup @relation(fields: [startupId], references: [id], onDelete: Cascade)

  roles UserRole[]
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique // e.g., "Admin", "Accountant", "CTO", "CFO", "Operations Manager"
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  permissions Permission[]
  users       UserRole[]
}

model Permission {
  id          String   @id @default(cuid())
  action      String   // e.g., "manage", "create", "read", "update", "delete"
  subject     String   // e.g., "users", "transactions", "inventory", "dashboard", "analytics"
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  roles Role[]

  @@unique([action, subject])
}

model UserRole {
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())

  @@id([userId, roleId])
}

// ============================================================================
// SIMULATED FINANCIAL DATA MODELS
// ============================================================================

enum TransactionType {
  CREDIT
  DEBIT
}

model MockBankAccount {
  id          String   @id @default(cuid())
  accountName String   // e.g., "Main Checking Account"
  balance     Float    @default(0.0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  startupId String
  startup   Startup @relation(fields: [startupId], references: [id], onDelete: Cascade)

  transactions Transaction[]
}

model Transaction {
  id          String          @id @default(cuid())
  amount      Float
  type        TransactionType
  description String
  date        DateTime        @default(now())
  
  startupId String
  startup   Startup @relation(fields: [startupId], references: [id], onDelete: Cascade)

  accountId String
  account   MockBankAccount @relation(fields: [accountId], references: [id])

  sale Sale?
}

// ============================================================================
// INVENTORY MANAGEMENT MODELS
// ============================================================================

model Product {
  id        String   @id @default(cuid())
  name      String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startupId String
  startup   Startup @relation(fields: [startupId], references: [id], onDelete: Cascade)
  
  sales Sale[]
}

model Sale {
  id           String   @id @default(cuid())
  quantitySold Int
  totalPrice   Float
  saleDate     DateTime @default(now())

  startupId String
  startup   Startup @relation(fields: [startupId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id])

  transactionId String      @unique
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}

// ============================================================================
// AI CFO FEATURES - ANALYTICS & METRICS
// ============================================================================

model CashflowMetric {
  id           String   @id @default(cuid())
  startupId    String
  periodStart  DateTime
  periodEnd    DateTime
  
  // Core Metrics
  totalRevenue          Decimal @default(0)
  totalExpenses         Decimal @default(0)
  netCashflow           Decimal @default(0)
  burnRate              Decimal @default(0) // Monthly burn rate
  runway                Decimal @default(0) // Months of runway
  
  // Revenue Metrics
  mrr                   Decimal @default(0) // Monthly Recurring Revenue
  arr                   Decimal @default(0) // Annual Recurring Revenue
  growthRate            Decimal @default(0) // Month-over-month growth %
  
  // Balance Metrics
  cashBalance           Decimal @default(0)
  accountsReceivable    Decimal @default(0)
  accountsPayable       Decimal @default(0)
  
  // Customer Metrics (from inventory sales)
  activeCustomers       Int     @default(0)
  newCustomers          Int     @default(0)
  churnedCustomers      Int     @default(0)
  customerAcquisitionCost Decimal @default(0)
  lifetimeValue         Decimal @default(0)
  
  // Inventory Metrics
  totalInventoryValue   Decimal @default(0)
  inventoryTurnover     Decimal @default(0)
  
  // Additional Metrics
  metadata              Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  startup   Startup  @relation(fields: [startupId], references: [id], onDelete: Cascade)
  
  @@index([startupId, periodStart])
}

// ============================================================================
// AI CFO FEATURES - SCENARIOS & FORECASTING
// ============================================================================

model AIScenario {
  id               String   @id @default(cuid())
  startupId        String
  name             String
  description      String?
  scenarioType     String   // forecast, what_if, sensitivity, stress_test
  
  // Input Parameters
  inputParameters  Json     // Store scenario variables (e.g., revenue growth %, cost reduction %)
  
  // AI-Generated Results
  projectedRevenue  Decimal?
  projectedExpenses Decimal?
  projectedCashflow Decimal?
  projectedRunway   Decimal?
  projectedMRR      Decimal?
  projectedARR      Decimal?
  confidence        Decimal? // AI confidence score 0-100
  
  // AI Insights
  insights          Json?    // Array of AI-generated insights
  recommendations   Json?    // Array of AI recommendations
  risks             Json?    // Array of identified risks
  opportunities     Json?    // Array of identified opportunities
  
  // Metadata
  createdBy    String?  // User ID who created this scenario
  isBookmarked Boolean  @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  startup   Startup  @relation(fields: [startupId], references: [id], onDelete: Cascade)
  
  @@index([startupId, createdAt])
}

// ============================================================================
// AI CFO FEATURES - ALERTS & NOTIFICATIONS
// ============================================================================

model Alert {
  id          String   @id @default(cuid())
  startupId   String
  type        String   // runway, burn_rate, anomaly, cash_low, churn, inventory_low
  severity    String   // info, warning, critical
  title       String
  message     String   @db.Text
  
  // Alert Data
  currentValue   Decimal?
  thresholdValue Decimal?
  
  // AI-Generated Recommendations
  recommendations Json? // Array of actionable recommendations
  
  // Related Entity (optional)
  relatedEntityType String? // product, transaction, account
  relatedEntityId   String?
  
  // Status
  isRead      Boolean  @default(false)
  isDismissed Boolean  @default(false)
  dismissedAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  startup   Startup  @relation(fields: [startupId], references: [id], onDelete: Cascade)
  
  @@index([startupId, createdAt])
  @@index([startupId, isRead])
}

// ============================================================================
// AI CFO FEATURES - INVESTOR UPDATES
// ============================================================================

model InvestorUpdate {
  id           String   @id @default(cuid())
  startupId    String
  title        String
  periodStart  DateTime
  periodEnd    DateTime
  
  // Key Metrics Summary
  metrics      Json     // Snapshot of key metrics
  
  // AI-Generated Content
  executiveSummary String @db.Text
  highlights       Json   // Array of highlights
  challenges       Json   // Array of challenges
  nextSteps        Json   // Array of next steps
  financialData    Json?  // Detailed financial breakdown
  
  // Financial Data
  revenueGrowth Decimal?
  burnRate      Decimal?
  runway        Decimal?
  
  // Status
  isDraft     Boolean   @default(true)
  publishedAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  startup   Startup  @relation(fields: [startupId], references: [id], onDelete: Cascade)
  
  @@index([startupId, periodStart])
}
